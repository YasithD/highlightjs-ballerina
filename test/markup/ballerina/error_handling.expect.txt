<span class="hljs-keyword">import</span> ballerina/io;

<span class="hljs-comment">// Converts `bytes` to a `string` value and then to an `int` value.</span>
<span class="hljs-keyword">function</span> <span class="hljs-title function_">intFromBytes</span>(<span class="hljs-params"><span class="hljs-type">byte</span></span>[] <span class="hljs-params">bytes</span>) <span class="hljs-keyword">returns</span> <span class="hljs-type">int</span><span class="hljs-operator">|</span><span class="hljs-type">error</span> {

    <span class="hljs-type">string</span><span class="hljs-operator">|</span><span class="hljs-keyword">error</span> <span class="hljs-variable">ret</span> <span class="hljs-operator">=</span> <span class="hljs-type">string</span><span class="hljs-keyword">:</span><span class="hljs-title function_">fromBytes</span>(<span class="hljs-params">bytes</span>);

    <span class="hljs-comment">// The `is` operator can be used to distinguish errors from other values.</span>
    <span class="hljs-keyword">if</span> ret <span class="hljs-keyword">is</span> <span class="hljs-type">error</span> {
        <span class="hljs-keyword">return</span> ret;
    } <span class="hljs-keyword">else</span> {
        <span class="hljs-keyword">return</span> <span class="hljs-type">int</span><span class="hljs-keyword">:</span><span class="hljs-title function_">fromString</span>(<span class="hljs-params">ret</span>);
    }
}

<span class="hljs-comment">// The `main` function can return an `error` value.</span>
<span class="hljs-keyword">public</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">main</span>() <span class="hljs-keyword">returns</span> <span class="hljs-type">error</span>? {

    <span class="hljs-type">int</span><span class="hljs-operator">|</span><span class="hljs-keyword">error</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> <span class="hljs-title function_">intFromBytes</span>([<span class="hljs-number">104</span>, <span class="hljs-number">101</span>, <span class="hljs-number">108</span>, <span class="hljs-number">108</span>, <span class="hljs-number">111</span>]);
    
    <span class="hljs-keyword">if</span> res <span class="hljs-keyword">is</span> <span class="hljs-type">error</span> {
        <span class="hljs-comment">// The `check` expression is the shorthand for this pattern of</span>
        <span class="hljs-comment">// checking if a value is an `error` value and it is returning that value.</span>
        <span class="hljs-keyword">return</span> res;
    } <span class="hljs-keyword">else</span> {
        io<span class="hljs-keyword">:</span><span class="hljs-title function_">println</span>(<span class="hljs-string">&quot;result: &quot;</span>, <span class="hljs-params">res</span>);
        <span class="hljs-keyword">return</span>;
    }
}